/// <reference path="node_modules/vectorx/vector.ts" />
function map(val1, start1, stop1, start2, stop2) {
    return start2 + (stop2 - start2) * ((val1 - start1) / (stop1 - start1));
}
function inRange(min, max, value) {
    if (min > max) {
        var temp = min;
        min = max;
        max = temp;
    }
    return value <= max && value >= min;
}
function min(a, b) {
    if (a < b)
        return a;
    return b;
}
function max(a, b) {
    if (a > b)
        return a;
    return b;
}
function clamp(val, min, max) {
    return this.max(this.min(val, max), min);
}
function rangeContain(a1, a2, b1, b2) {
    return max(a1, a2) >= max(b1, b2) && min(a1, a2) <= max(b1, b2);
}
function createNDimArray(dimensions, fill) {
    if (dimensions.length > 0) {
        function helper(dimensions) {
            var dim = dimensions[0];
            var rest = dimensions.slice(1);
            var newArray = new Array();
            for (var i = 0; i < dim; i++) {
                newArray[i] = helper(rest);
            }
            return newArray;
        }
        var array = helper(dimensions);
        var looper = new Vector2(0, 0);
        looper.vals = dimensions;
        looper.loop((pos) => {
            setElement(array, pos.vals, fill(pos));
        });
        return array;
    }
    else {
        return undefined;
    }
}
function getElement(array, indices) {
    if (indices.length == 0) {
        return null;
    }
    else {
        return getElement(array[indices[0]], indices.slice(1));
    }
}
function setElement(array, pos, val) {
    if (pos.length == 1) {
        array[pos[0]] = val;
    }
    else {
        setElement(array[pos[0]], pos.slice(1), val);
    }
}
function getMousePos(canvas, evt) {
    var rect = canvas.getBoundingClientRect();
    return new Vector2(evt.clientX - rect.left, evt.clientY - rect.top);
}
function createCanvas(x, y) {
    var canvas = document.createElement('canvas');
    canvas.width = x;
    canvas.height = y;
    document.body.appendChild(canvas);
    var ctxt = canvas.getContext('2d');
    return { ctxt: ctxt, canvas: canvas };
}
function random(min, max) {
    return Math.random() * (max - min) + min;
}
function randomSpread(center, spread) {
    var half = spread / 2;
    return random(center - half, center + half);
}
var lastUpdate = Date.now();
function loop(callback) {
    var now = Date.now();
    callback(now - lastUpdate);
    lastUpdate = now;
    requestAnimationFrame(() => {
        loop(callback);
    });
}
function mod(number, modulus) {
    return ((number % modulus) + modulus) % modulus;
}
function* iter(n) {
    var i = 0;
    while (i < n)
        yield i++;
}
var keys = {};
document.addEventListener('keydown', (e) => {
    keys[e.keyCode] = true;
});
document.addEventListener('keyup', (e) => {
    keys[e.keyCode] = false;
});
function getMoveInput() {
    var dir = new Vector2(0, 0);
    if (keys[37] || keys[65])
        dir.x--; //left
    if (keys[38] || keys[87])
        dir.y++; //up
    if (keys[39] || keys[68])
        dir.x++; //right
    if (keys[40] || keys[83])
        dir.y--; //down
    return dir;
}
function getFiles(strings) {
    var promises = [];
    for (var string of strings) {
        var promise = fetch(string)
            .then(resp => resp.text())
            .then(text => text);
        promises.push(promise);
    }
    return Promise.all(promises);
}
function findbestIndex(list, evaluator) {
    if (list.length < 1) {
        return -1;
    }
    var bestIndex = 0;
    var bestscore = evaluator(list[0]);
    for (var i = 1; i < list.length; i++) {
        var score = evaluator(list[i]);
        if (score > bestscore) {
            bestscore = score;
            bestIndex = i;
        }
    }
    return bestIndex;
}
function createAndAppend(element, html) {
    var result = string2html(html);
    element.appendChild(result);
    return result;
}
function string2html(string) {
    var div = document.createElement('div');
    div.innerHTML = string;
    return div.children[0];
}
class Vector {
    constructor(size) {
        this.vals = new Array(size);
    }
    add(v) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] += v.vals[i];
        }
        return this;
    }
    sub(v) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] -= v.vals[i];
        }
        return this;
    }
    scale(s) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] *= s;
        }
        return this;
    }
    length() {
        var sum = 0;
        for (var i = 0; i < this.vals.length; i++) {
            sum += Math.pow(this.vals[i], 2);
        }
        return Math.sqrt(sum);
    }
    normalize() {
        return this.scale(1 / this.length());
    }
    to(v) {
        return v.c().sub(this);
    }
    lerp(v, weight) {
        return this.c().add(this.to(v).scale(weight));
    }
    c() {
        return new Vector(this.vals.length).overwrite(this);
    }
    overwrite(v) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] = v.vals[i];
        }
        return this;
    }
    dot(v) {
        var sum = 0;
        for (var i = 0; i < this.vals.length; i++) {
            sum += this.vals[i] * v.vals[i];
        }
        return sum;
    }
    loop(callback) {
        var counter = new Vector(this.vals.length);
        counter.vals.fill(0);
        var allzeroes = true;
        for (var i = 0; i < this.vals.length; i++) {
            if (this.vals[i] != 0) {
                allzeroes = false;
            }
        }
        if (allzeroes) {
            return;
        }
        callback(counter);
        while (!this.incr(counter)) {
            callback(counter);
        }
    }
    incr(v) {
        for (var i = 0; i < v.vals.length; i++) {
            v.vals[i]++;
            if (v.vals[i] >= this.vals[i]) {
                v.vals[i] = 0;
            }
            else {
                return false;
            }
        }
        return true;
    }
    project(v) {
        return v.c().scale(this.dot(v) / v.dot(v));
    }
    get(i) {
        return this.vals[i];
    }
    set(i, val) {
        this.vals[i] = val;
    }
    get x() {
        return this.vals[0];
    }
    get y() {
        return this.vals[1];
    }
    get z() {
        return this.vals[2];
    }
    set x(val) {
        this.vals[0] = val;
    }
    set y(val) {
        this.vals[1] = val;
    }
    set z(val) {
        this.vals[2] = val;
    }
    cross(v) {
        var x = this.y * v.z - this.z * v.y;
        var y = this.z * v.x - this.x * v.z;
        var z = this.x * v.y - this.y * v.x;
        return new Vector3(x, y, z);
    }
}
class Vector2 extends Vector {
    constructor(x, y) {
        super(2);
        this.x = x;
        this.y = y;
    }
}
class Vector3 extends Vector {
    constructor(x, y, z) {
        super(3);
        this.x = x;
        this.y = y;
        this.z = z;
    }
}
class Constructor {
    constructor(className, fields) {
        this.fields = fields;
        this.className = className;
    }
    generateString(lang) {
        var assignmentString = [];
        var parameterStrings = [];
        var fieldsDeclarations = [];
        for (var field of this.fields) {
            parameterStrings.push(`${field.name}:${field.type}`);
            assignmentString.push(`this.${field.name} = ${field.name};`);
            fieldsDeclarations.push(`${field.name}:${field.type};`);
        }
        var constructorTemplate = `class ${this.className}{
    ${fieldsDeclarations.join('\n    ')}

    constructor(${parameterStrings.join(',')}){
        ${assignmentString.join('\n\t')}
    }
}`;
        return constructorTemplate;
    }
}
var Language;
(function (Language) {
    Language[Language["js"] = 0] = "js";
    Language[Language["ts"] = 1] = "ts";
    Language[Language["cs"] = 2] = "cs";
})(Language || (Language = {}));
class Field {
    constructor(name, type) {
        this.name = name;
        this.type = type;
    }
}
Field.string = 'string';
Field.boolean = 'boolean';
Field.number = 'number';
Field.any = 'any';
class Box {
    constructor(value) {
        this.isSet = false;
        this.onchange = new EventSystem();
        this.onOldChange = new EventSystem();
        this.value = value;
        this.onClear = new EventSystem();
    }
    get() {
        return this.value;
    }
    set(value, silent = false) {
        var old = this.value;
        this.value = value;
        if (old != value || !this.isSet) {
            this.isSet = true;
            if (!silent) {
                this.onchange.trigger(this.value);
                this.onOldChange.trigger(old);
            }
        }
    }
    clear() {
        this.isSet = false;
        this.onClear.trigger(0);
    }
}
class EventSystem {
    constructor() {
        this.callbacks = [];
    }
    listen(callback) {
        this.callbacks.push(callback);
    }
    deafen(callback) {
        this.callbacks.splice(this.callbacks.findIndex(v => v === callback), 1);
    }
    trigger(value) {
        for (var callback of this.callbacks) {
            callback(value);
        }
    }
}
/// <reference path="node_modules/utilsx/utils.ts" />
/// <reference path="node_modules/eventsystemx/EventSystem.ts" />
class FieldView {
    constructor(element) {
        var template = `
            <div style="display:flex;">
                <input id="name"></input>
                <input id="type"></input>
                <input id="delete" type="button" value="delete">
            </div>
        `;
        this.element = createAndAppend(element, template);
        this.nameelement = this.element.querySelector('#name');
        this.typeelement = this.element.querySelector('#type');
        this.deleteelement = this.element.querySelector('#delete');
        this.field = new Box(new Field('', ''));
        this.deleteEvent = new EventSystem();
        this.nameelement.addEventListener('input', () => {
            this.field.value.name = this.nameelement.value;
            this.field.onchange.trigger(this.field.value);
        });
        this.typeelement.addEventListener('input', () => {
            this.field.value.type = this.typeelement.value;
            this.field.onchange.trigger(this.field.value);
        });
        this.deleteelement.addEventListener('click', () => {
            this.deleteEvent.trigger(this);
        });
    }
}
/// <reference path="node_modules/utilsx/utils.ts" />
/// <reference path="constructor.ts" />
/// <reference path="fieldView.ts" />
class View {
    constructor(element, template) {
        this.template = template;
        this.element = createAndAppend(element, template);
    }
}
class ConstructorApp extends View {
    constructor(element) {
        super(element, `
            <div style="display:flex;">
                <div>
                    <div id="fieldscontainer"></div>
                    <input type="button" id="addFieldButton" value="add field">
                </div>
                <textarea rows="40" cols="400" style="white-space: nowrap;  overflow: auto; " id="outputcontainer"></textarea>
            </div>
        `);
        this.fieldViews = [];
        this.fieldscontainer = this.element.querySelector('#fieldscontainer');
        this.outputcontainer = this.element.querySelector('#outputcontainer');
        this.addFieldButton = this.element.querySelector('#addFieldButton');
        var addFieldView = () => {
            var newFieldView = new FieldView(this.fieldscontainer);
            this.fieldViews.push(newFieldView);
            newFieldView.deleteEvent.listen((fieldView) => {
                this.fieldViews.splice(this.fieldViews.findIndex((el) => el == fieldView), 1);
                this.update();
                this.updateOutput();
            });
            newFieldView.field.onchange.listen((field) => {
                this.updateOutput();
            });
        };
        for (var i = 0; i < 3; i++) {
            addFieldView();
        }
        this.addFieldButton.addEventListener('click', () => {
            addFieldView();
        });
        this.updateOutput();
    }
    update() {
        this.fieldscontainer.innerHTML = '';
        for (var view of this.fieldViews) {
            this.fieldscontainer.appendChild(view.element);
        }
    }
    updateOutput() {
        var fields = [];
        for (var fieldView of this.fieldViews) {
            fields.push(fieldView.field.get());
        }
        var ctor = new Constructor('test', fields);
        this.outputcontainer.innerHTML = ctor.generateString(Language.ts);
    }
}
/// <reference path="node_modules/utilsx/utils.ts" />
/// <reference path="node_modules/vectorx/vector.ts" />
/// <reference path="constructor.ts" />
/// <reference path="constructorApp.ts" />
var testConstructor = new Constructor('Test', [
    new Field('name', Field.string),
    new Field('child', 'Test'),
    new Field('age', Field.number),
]);
var appcontainer = document.querySelector('#appcontainer');
new ConstructorApp(appcontainer);
//# sourceMappingURL=data:application/json;base64,